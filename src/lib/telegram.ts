// Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ Telegram
const mockTelegramUser = {
  id: 123456789,
  first_name: 'Test',
  last_name: 'User',
  username: 'testuser',
  language_code: 'en'
}

export interface TelegramUser {
  id: number
  first_name: string
  last_name?: string
  username?: string
  language_code?: string
}

export const initTelegram = () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Telegram WebApp
    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
      const webApp = window.Telegram.WebApp
      webApp.ready()
      webApp.expand()
      webApp.headerColor = '#1a1a1a'
      webApp.backgroundColor = '#1a1a1a'
      
      return {
        isAvailable: true,
        user: webApp.initDataUnsafe?.user || mockTelegramUser,
        webApp
      }
    } else {
      // Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      console.log('Telegram WebApp not available, using mock data')
      return {
        isAvailable: true,
        user: mockTelegramUser,
        webApp: null
      }
    }
  } catch (error) {
    console.error('Telegram WebApp not available:', error)
    return {
      isAvailable: true,
      user: mockTelegramUser,
      webApp: null
    }
  }
}

export const sendOrderToBot = async (orderData: {
  items: Array<{ name: string; quantity: number; price: number }>
  total: number
  user: TelegramUser
  address: { text: string; lat: number; lng: number }
  jointsUsed?: number
  finalAmount: number
}) => {
  const botToken = '8219153061:AAFKad_M06tTrOez7guNNtGDVxaMBqWxgoU'
  const chatId = 517453850 // –í–∞—à Telegram ID
  
  const itemsList = orderData.items
    .map(item => `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity}‚Çø`)
    .join('\n')
    
  const paymentInfo = orderData.jointsUsed 
    ? `üí∞ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* ${orderData.total}‚Çø\nüö¨ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–æ—Å—è–∫–æ–≤:* ${orderData.jointsUsed}‚Çø\nüí≥ *–ö –¥–æ–ø–ª–∞—Ç–µ:* ${orderData.finalAmount}‚Çø`
    : `üí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* ${orderData.finalAmount}‚Çø`
    
  const message = `
üõçÔ∏è *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*

üì¶ *–¢–æ–≤–∞—Ä—ã:*
${itemsList}

${paymentInfo}

üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:*
ID: ${orderData.user.id}
–ò–º—è: ${orderData.user.first_name} ${orderData.user.last_name || ''}
Username: @${orderData.user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*
${orderData.address.text}
[–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](https://maps.google.com/?q=${orderData.address.lat},${orderData.address.lng})
  `.trim()

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown',
      }),
    })
    
    return response.ok
  } catch (error) {
    console.error('Error sending order to bot:', error)
    return false
  }
}